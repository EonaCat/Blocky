/*
EonaCatDns
Copyright (C) 2017-2023 EonaCat (Jeroen Saey)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License
*/

using EonaCat.Dns.Core.Base;
using System;
using System.Globalization;
using System.IO;
using System.Net;

namespace EonaCat.Dns.Core
{
    public class MasterWriter
    {
        private static readonly DateTime UnixEpoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);

        private readonly TextWriter _text;

        internal MasterWriter(TextWriter text)
        {
            _text = text;
        }

        public void WriteSpace()
        {
            _text.Write(' ');
        }

        public void WriteEndOfLine()
        {
            _text.Write("\r\n");
        }

        public void WriteByte(byte value, bool appendSpace = true)
        {
            _text.Write(value);
            if (appendSpace)
            {
                WriteSpace();
            }
        }

        public void WriteUInt16(ushort value, bool appendSpace = true)
        {
            _text.Write(value);
            if (appendSpace)
            {
                WriteSpace();
            }
        }

        public void WriteUInt32(uint value, bool appendSpace = true)
        {
            _text.Write(value);
            if (appendSpace)
            {
                WriteSpace();
            }
        }

        public void WriteString(string value, bool appendSpace = true)
        {
            var needQuote = false;

            value ??= string.Empty;
            if (value == string.Empty)
            {
                needQuote = true;
            }

            value = value.Replace("\\", "\\\\").Replace("\"", "\\\"");
            if (value.Contains(' '))
            {
                needQuote = true;
            }

            if (needQuote)
            {
                _text.Write('"');
            }

            _text.Write(value);
            if (needQuote)
            {
                _text.Write('"');
            }

            if (appendSpace)
            {
                WriteSpace();
            }
        }

        public void WriteStringUnencoded(string value, bool appendSpace = true)
        {
            _text.Write(value);
            if (appendSpace)
            {
                WriteSpace();
            }
        }

        public void WriteDomainName(DomainName value, bool appendSpace = true)
        {
            WriteStringUnencoded(value.ToString(), appendSpace);
        }

        public void WriteBase16String(byte[] value, bool appendSpace = true)
        {
            WriteString(Base16Converter.ToString(value, true), appendSpace);
        }

        public void WriteBase64String(byte[] value, bool appendSpace = true)
        {
            WriteString(Convert.ToBase64String(value), appendSpace);
        }

        public void WriteTimeSpan16(TimeSpan value, bool appendSpace = true)
        {
            WriteUInt16((ushort)value.TotalSeconds, appendSpace);
        }

        public void WriteTimeSpan32(TimeSpan value, bool appendSpace = true)
        {
            WriteUInt32((uint)value.TotalSeconds, appendSpace);
        }

        public void WriteDateTime(DateTime value, bool appendSpace = true)
        {
            WriteString(value.ToUniversalTime().ToString("yyyyMMddHHmmss", CultureInfo.InvariantCulture), appendSpace);
        }

        public void WriteIpAddress(IPAddress value, bool appendSpace = true)
        {
            WriteString(value.ToString(), appendSpace);
        }

        public void WriteDnsType(RecordType value, bool appendSpace = true)
        {
            if (!Enum.IsDefined(typeof(RecordType), value))
            {
                _text.Write("TYPE_");
            }
            _text.Write(value);
            if (appendSpace)
            {
                WriteSpace();
            }
        }

        public void WriteDnsClass(RecordClass value, bool appendSpace = true)
        {
            if (!Enum.IsDefined(typeof(RecordClass), value))
            {
                _text.Write("UNKNOWN_CLASS_");
            }
            _text.Write(value);
            if (appendSpace)
            {
                WriteSpace();
            }
        }

        public static string GetDefaultMasterFile(string ipAddressV4)
        {
            return $@"; Generated by EonaCatDns
; Zone name and default timeout (TTL)

$ORIGIN blocky.dns
$TTL 86400
@     IN     SOA    dns1.blocky.dns.     hostmaster.blocky.dns. (
                    2001062501 ; serial
                    21600      ; refresh after 6 hours
                    3600       ; retry after 1 hour
                    604800     ; expire after 1 week
                    86400 )    ; minimum TTL of 1 day

      IN     NS     dns1.blocky.dns.
      IN     NS     dns2.blocky.dns.

      IN     MX     10     mail.blocky.dns.
      IN     MX     20     mail2.blocky.dns.

             IN     A       {ipAddressV4}

blocky   IN     A       {ipAddressV4}
server1      IN     A       10.0.1.5
server2      IN     A       10.0.1.7
dns1         IN     A       10.0.1.2
dns2         IN     A       10.0.1.3

ftp          IN     CNAME   server1
mail         IN     CNAME   server1
mail2        IN     CNAME   server2
www          IN     CNAME   server2";
        }
    }
}