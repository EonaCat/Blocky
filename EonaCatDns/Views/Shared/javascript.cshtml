@model IndexViewModel;

<script>
    /*
    EonaCatDns
    Optimized Script
    */

    // Constants and variables
    const token = '@Model.Token';
    const username = '@Model.Username';
    const statsRefreshInterval = @ConstantsDns.Stats.RefreshInterval * 1000;
    const title = '@ViewData["Title"]';
    let refreshInProgress = false;
    let isadmin = token !== '';
    let isDashboardShown = true;

    const $statIds = [
        "#totalQueriesStats", "#totalNoErrorStats", "#totalServerFailuresStats",
        "#totalNameErrorsStats", "#totalRefusedStats", "#totalBlockedStats",
        "#totalCachedStats", "#totalClientsStats"
    ];
    const $percentageIds = [
        "#totalQueriesStatsPercentage", "#totalNoErrorStatsPercentage",
        "#totalServerFailuresStatsPercentage", "#totalNameErrorsStatsPercentage",
        "#totalRefusedStatsPercentage", "#totalBlockedStatsPercentage",
        "#totalCachedStatsPercentage"
    ];

    const divDashboardSpinner = $("#divDashboardSpinner");
    const divDashboard = $("#divDashboard");

    function loadDashboard() 
    {
        $("#tabDashboardButton").addClass("active");
        showDashboard();
        refreshDashboard();
    }

    // Refresh dashboard with updated stats
    async function refreshDashboard(hideLoader = false) {
        if (refreshInProgress) return;

        if (!hideLoader) {
            divDashboard.hide();
            divDashboardSpinner.show();
        } else {
            divDashboardSpinner.hide();
        }

        refreshInProgress = true;

        const type = $("input[name=radioStatsType]:checked").val();
        await HTTPRequest({
            url: `/api/stats?token=${token}&type=${type}`,
            async: true,
            success: (responseJSON) => updateStats(responseJSON.response),
            error: () => handleDashboardError(),
            invalidToken: loadDashboard
        });
        updateDashboardView();
        refreshInProgress = false;
    }

    function updateDashboardView()
    {
        if (!$("#tabDashboardButton").hasClass("active"))
        {
            return;
        }

        hideAlert();
        document.title = title;

        $(".nav-tabs li").removeClass("active");
        $(".tab-pane").removeClass("active");
        $("#tabDashboardButton").addClass("active");
        $("#main").show();

        if (isDashboardShown)
        {
            $("#divInfo").hide();
            $("#divInfo").removeClass("active");
            $("#divDashboard").show();
        }
        else
        {
            $("#divInfo").show();
            $("#divInfo").addClass("active");
            $("#divDashboard").hide();
        }
    }


    function refreshLogFilesList() {
        const lstLogFiles = $("#lstLogFiles");

        HTTPRequest({
            url: `/api/logs?token=${token}`,
            async: true,
            success: function (responseJSON) {
                const logFiles = responseJSON.response.logFiles;

                const list = logFiles.map(function (logFile) {
                    return `<div class="log"><a href="#" onclick="return viewLog('${logFile.fileName}');">${logFile.fileName} [${logFile.size}]</a></div>`;
                }).join('');

                lstLogFiles.html(list);
            },
            invalidToken: function () {
                logout();
                loadDashboard();
            },
            loader: lstLogFiles
        });

        return false;
    }

    function logout() {
        HTTPRequest({
            url: "/index/logout",
        });
    }

    function viewLog(logFile) {
        const logPanel = $("#logPanel");
        const txtLogPanelTitle = $("#txtLogPanelTitle");
        const spinner = $("#spinner");
        const logPanelBody = $("#logPanelBody");

        txtLogPanelTitle.text(logFile);

        logPanelBody.hide();
        spinner.show();
        logPanel.show();

        const url = `/api/viewLog?token=${token}&log=${logFile}`;

        HTTPGetFileRequest({
            url,
            async: true,
            success: function (response) {
                spinner.hide();
                logPanelBody.text(response.split('\n').reverse().join('\n'));
                logPanelBody.show();
            },
            invalidToken: function () {
                logout();
                loadDashboard();
            },
            loader: spinner
        });

        return false;
    }

    function downloadLog() {
        const logFile = $("#txtLogPanelTitle").text();
        window.open(`/api/viewLog?token=${token}&log=${logFile}`, "_blank");
        return false;
    }

    function deleteLog() {
        const logFile = $("#txtLogPanelTitle").text();

        if (!confirm(`Are you sure you want to permanently delete the log file '${logFile}'?`)) {
            return false;
        }

        const btn = $("#btnDeleteLog").button("loading");

        HTTPRequest({
            url: `/api/deleteLog?token=${token}&log=${logFile}`,
            async: true,
            success: function (responseJSON) {
                refreshLogFilesList();
                $("#logPanel").hide();
                btn.button("reset");
                showAlert("success", "Log Deleted!", "Log file was deleted successfully.");
            },
            error: function () {
                btn.button("reset");
            },
            invalidToken: function () {
                btn.button("reset");
                loadDashboard();
            }
        });

        return false;
    }

    function defaultDomain(id) {
        HTTPRequest({
            url: "/api/defaultDomain?token=" + token + "&id=" + id,
            async: true,
            success: function (responseJSON) {
                location.reload();
            },

            invalidToken: function () {
                logout();
                loadDashboard();
            },
        });

        return false;
    }

    function allowClient(name) {
        HTTPRequest({
            url: "/api/allowClient?token=" + token + "&name=" + name,
            async: true,
            success: function (responseJSON) {
                location.reload();
            },

            invalidToken: function () {
                logout();
                loadDashboard();
            },
        });

        return false;
    }

    function blockClient(name) {
        HTTPRequest({
            url: "/api/blockClient?token=" + token + "&name=" + name,
            async: true,
            success: function (responseJSON) {
                location.reload();
            },

            invalidToken: function () {
                logout();
                loadDashboard();
            },
        });

        return false;
    }

    function allowDomain(id) {
        HTTPRequest({
            url: "/api/allowDomain?token=" + token + "&id=" + id,
            async: true,
            success: function (responseJSON) {
                location.reload();
            },

            invalidToken: function () {
                logout();
                loadDashboard();
            },
        });

        return false;
    }

    function blockDomain(id) {
        HTTPRequest({
            url: "/api/blockDomain?token=" + token + "&id=" + id,
            async: true,
            success: function (responseJSON) {
                location.reload();
            },

            invalidToken: function () {
                logout();
                loadDashboard();
            },
        });

        return false;
    }

    function updateStats(result) {
        const stats = result.stats;
        if (!stats) return;

        const keys = Object.keys(stats);
        const totalQueries = stats.totalQueries;

        $statIds.forEach((id, i) => $(id).text(stats[keys[i]].toLocaleString()));
        $percentageIds.forEach((id, i) => {
            const percentage = totalQueries > 0
                ? ((stats[keys[i]] * 100) / totalQueries).toFixed(2) + '%'
                : '0%';
            $(id).text(percentage);
        });

        UpdateCharts(result);
        if ($("#tabDashboardButton").hasClass("active")) divDashboard.show();
        divDashboardSpinner.hide();
    }

    function handleDashboardError() {
        divDashboardSpinner.hide();
        divDashboard.show();
    }

    function UpdateCharts(result) {
        // Stats chart
        if (!window.chartDashboardMain) {
            const canvasStats = document.getElementById("stats").getContext("2d");
            window.chartDashboardMain = new Chart(canvasStats, {
                type: "line",
                data: result.statisticsData,
                options: {
                    elements: {
                        line: {
                            tension: 0.2
                        }
                    }
                }
            });
        } else if (typeof window.chartDashboardMain.update === "function") {
            window.chartDashboardMain.data = result.statisticsData;
            window.chartDashboardMain.update();
        }

        // Hide or show topList based on conditions
        $('.topList').toggle(isadmin && result.queryTypeChartData.labels.length > 0);

        // Query type chart
        let chartqueryDonut = window.chartqueryDonut;
        if (!chartqueryDonut) {
            const queryDonut = document.getElementById("queryDonut");
            if (queryDonut) {
                const contextqueryDonut = queryDonut.getContext("2d");
                chartqueryDonut = window.chartqueryDonut = new Chart(contextqueryDonut, {
                    type: "doughnut",
                    data: result.queryTypeChartData,
                    options: {
                        cutoutPercentage: 80,
                        aspectRatio: 1
                    }
                });
            }
        } else if (typeof chartqueryDonut.update === "function") {
            chartqueryDonut.data = result.queryTypeChartData;
            chartqueryDonut.update();
        }

        // Call createTable with a delay for each table
        setTimeout(() => createTable("topBlocked", result.topBlocked), 100);
        setTimeout(() => createTable("topClients", result.topClients), 100);
        setTimeout(() => createTable("topDomains", result.topDomains), 100);
        setTimeout(() => createTable("lastQueries", result.lastQueries), 100);
    }

    function showInfo() 
    {
        isDashboardShown = false;
        updateDashboardView();
    }

    function showDashboard() 
    {
        isDashboardShown = true;
        updateDashboardView();
    }

    function updateChart(chartId, chartType, data, options) {
        const canvas = document.getElementById(chartId);
        if (!canvas) return;

        const context = canvas.getContext("2d");
        if (!window[chartId]) {
            window[chartId] = new Chart(context, { type: chartType, data, options });
        } else {
            window[chartId].data = data;
            window[chartId].update();
        }
    }

    function createTable(tableId, data) {
        const $table = $(`#${tableId}`);
        if (!data || data.length === 0) {
            $table.html("<thead><tr><th>Name</th><th>&nbsp;</th></tr></thead><tbody><tr><td colspan='2'>No Data</td></tr></tbody>");
            return;
        }

        const tableRows = data.map(item => {
            const { id, name, isBlocked, alias } = item;
            const blockedClass = isBlocked ? "denied" : "allowed";
            const nameHtml = id ? `<a href='/Domain/Index' class='editDomain' data-bs-toggle="modal" data-bs-target="#EonaCatModal" data-id='${id}'>${name}</a>` : name;
            const buttonHtml = generateButtons(tableId, id, name, isBlocked);

            return `<tr class='${blockedClass}' title='${alias || ""}'>
                        <td>${nameHtml}</td>
                        <td style='width:30%'>${buttonHtml}</td>
                    </tr>`;
        }).join('');

        $table.html(`<thead><tr><th>Name</th><th>&nbsp;</th></tr></thead><tbody>${tableRows}</tbody>`);
    }

    function generateButtons(tableId, id, name, isBlocked) {
        if (["topDomains", "topBlocked", "lastQueries"].includes(tableId)) {
            return isBlocked ? `${allowButton(id)} ${defaultButton(id)}` : blockedButton(id);
        }
        if (tableId === "topClients") {
            return isBlocked ? allowClientButton(name) : blockClientButton(name);
        }
        return '';
    }

    // Button Generators
    const allowButton = id => `<a href="#" onclick="return allowDomain(${id});">Allow</a>`;
    const blockedButton = id => `<a href="#" onclick="return blockDomain(${id});">Block</a>`;
    const defaultButton = id => `<a href="#" onclick="return defaultDomain(${id});">Default</a>`;
    const allowClientButton = name => `<a href="#" onclick="return allowClient('${name}');">Allow</a>`;
    const blockClientButton = name => `<a href="#" onclick="return blockClient('${name}');">Block</a>`;

    // Event listeners and initialization
    $(function () {
        isadmin && setupAdminFeatures();
        loadDashboard();
    });

    function setupAdminFeatures() {
        $("#header").html(`<div class="title">
            <a href="/"><img src="/images/logo.svg" style="width: 30px" alt="EonaCat Logo" /></a>${$("#header").html()}
        </div>`);

        $(document).on('click', '.editDomain', function () {
            const id = $(this).data('id');
            $('#partial').load(`@Url.Action("GetById", "Domain")?id=${id}`);
        });

        setInterval(() => !refreshInProgress && refreshDashboard(true), statsRefreshInterval);
    }
</script>
